function RunIssues = testSpectra(data,RunIssues)

% function RunIssues = testSpectra()
%
% Tests the wave resource functions and identifies any issues with the
% functionality and calculations
%
% Input:
%   Data            A structure that contains the data used in the testing
%                   of the MHKiT functions
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the power performance scripts
% Output:
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the wave resource module scripts
% Dependencies
%   CalcWaveSpectrum, frequencyMoment, waveNumber, KfromW,
%   OmniDirEnergyFlux, initWaveSpectra
%
% Usage
%   RunIssues = testSpectra(LoadData)
%   runs the wave resource module test scripts using data and logging
%   and issues in RunIssues


parameters = initParameters();
parameters.waterDensity = data.d1.waterDensity;  % density of water
parameters.waterDepth   = data.d1.waterDepth;   % water depth
freqRange = data.d1.freqRange;

TestSpectrum = initWaveSpectra();

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  CalcWaveSpectrum
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% testing the error checking in CalcWaveSpectrum
FailIdx = 1;
[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Incorrect number of input arguments, requires at least 4 arguments, only 3 arguments passed', ...
    'passed too few arguments, 3 arguments passed', ...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Incorrect number of input arguments, too many agruments, requires 8 at most, 9 arguments passed', ...
    'passed to many agruments, 9 arguments passed', ...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D',0.85,'D');         

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveElevation must be a numeric vector with length > 1', ... 
    'passed a character instead of a vector',...
    RunIssues, FailIdx, 'D',data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D',0.85);      

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveElevation must be a numeric vector with length > 1', ...
    'passed a number instead of a vector',...
    RunIssues, FailIdx, 5,data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D',0.85);      

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveTime must be a numeric vector with length > 1', ...
    'passed a character instead of a vector',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),'D',1024,50,parameters,freqRange,'D',0.85);    

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveTime must be a numeric vector with length > 1', ...
    'passed a number instead of a vector',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),5,1024,50,parameters,freqRange,'D',0.85); 

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveElevation and waveTime must be the same length', ...
    'waveElevation and waveTime are vectors with different lengths',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-3900),1024,50,parameters,freqRange,'D',0.85); 

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is a character',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),'D',50,parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is 0',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),0,50,parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is a vector',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),[1 2],50,parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is not an integer',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),5.5,50,parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is a character',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,'D',parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is 0',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,0,parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is a vector',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,[1 2],parameters,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Invalid Structure input, must by type Parameters', ...
    'Parameters input is a Spectrum structure',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,TestSpectrum,freqRange,'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Invalid input argument, freqRange must be a vector of length 2', ...
    'Frequency range vector has a length of 3',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,[1 2 3],'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Invalid input argument, freqRange values must be greater than 0', ...
    'frequency range vector has a negative number',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,[-2 1],'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Invalid input argument, freqRange, second element must be greater that the first', ...
    'The second element of the frequency range vector ',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,[3 2],'D',0.85);

[RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
    'Invalid input arguments, unrecongnized flag or input argumjent', ...
    'Using character P instead of D for the depth input',...
    RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,freqRange,'P',0.85);

% running the test scripts and evaluating the results
TestIdx = 1;
[RunIssues, TestIdx, waveSpectra1] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 1, no optional parameters', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50);

[RunIssues, TestIdx, waveSpectra2] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 2, with parameters structure', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters);

[RunIssues, TestIdx, waveSpectra3] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 3, with freqRange', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,freqRange);

[RunIssues, TestIdx, waveSpectra4] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 4, parameters and freqRange', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,freqRange);

[RunIssues, TestIdx, waveSpectra5] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 5, parameters and freqRange with reversed locations', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,freqRange,parameters);

% calculate the wave energy spectra, test 6, with deep water flag set
[RunIssues, TestIdx, waveSpectra6] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 6, with deep water flag set', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,'D');

[RunIssues, TestIdx, waveSpectra7] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 7, with parameters and deep water flag set', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,'D');

[RunIssues, TestIdx, waveSpectra8] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 8, with parameters, deep water flag, and frequency range', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D');

[RunIssues, TestIdx, waveSpectra9] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 9, with parameters and deep water flag, and frequency range reversed in position', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,freqRange,parameters,'D');

[RunIssues, TestIdx, waveSpectra10] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 10, with parameters, deep water flag, and frequency range in reversed in position', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,'D',freqRange,parameters);

% calculate the wave energy spectra with confidence limits
[RunIssues, TestIdx, waveSpectra11] = TestFunction('CalcWaveSpectrum', 1, ...
    'calculate the wave spectra, test 11, with parameters, deep water flag, frequency range and confidence limits', ...
    RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,1,freqRange,parameters,0.95);

% only use this for creating the test data file
% for i = 1:11
%     i
%     num2str(i)
%     ['AquaData.Data.AquaLabSpecData(' num2str(i) ', 1 ) = waveSpectra'  num2str(i) '.props.TimeSeriesDuration;']
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 1 ) = waveSpectra'  num2str(i) '.props.TimeSeriesDuration;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 2 ) = waveSpectra'  num2str(i) '.props.numSamples;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 3 ) = waveSpectra'  num2str(i) '.props.sampleRate;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 4 ) = waveSpectra'  num2str(i) '.environment.waterDepth;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 5 ) = waveSpectra'  num2str(i) '.environment.waterDensity;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 6 ) = waveSpectra'  num2str(i) '.environment.g;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 7 ) = waveSpectra'  num2str(i) '.stats.Hm0;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 8 ) = waveSpectra'  num2str(i) '.stats.Tp;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 9 ) = waveSpectra'  num2str(i) '.stats.Te;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 10 ) = waveSpectra'  num2str(i) '.stats.T0;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 11 ) = waveSpectra'  num2str(i) '.stats.Tm;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 12 ) = waveSpectra'  num2str(i) '.stats.Te;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 13 ) = waveSpectra'  num2str(i) '.stats.e;']);
%     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 14 ) = waveSpectra'  num2str(i) '.stats.v;']);
%     eval(['AquaData.Data.AquaLabSpectra' num2str(i) ' = waveSpectra'  num2str(i) '.Spectrum;']);
%     eval(['AquaData.Data.AquaLabFrequency' num2str(i) ' = waveSpectra'  num2str(i) '.frequency;']);
%     eval(['AquaData.Data.AquaLabUpper95Conf' num2str(i) ' = waveSpectra'  num2str(i) '.Upper95Conf;']);
%     eval(['AquaData.Data.AquaLabLower95Conf' num2str(i) ' = waveSpectra'  num2str(i) '.Lower95Conf;']);
% end;
% save testDataSpectra1 AquaData



% testing the calculations 
load testDataSpectra1.mat;

for i = 1:11
    
    %(functionName, CompLog, TargetData, TestData, RunIssues,INDX)
   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.props.TimeSeriesDuration, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',1), RunIssues, [i,1]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.props.numSamples, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',2), RunIssues, [i,2]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.props.sampleRate, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',3), RunIssues, [i,3]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.environment.waterDepth, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',4), RunIssues, [i,4]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.environment.waterDensity, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',5), RunIssues, [i,5]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.environment.g, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',6), RunIssues, [i,6]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.Hm0, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',7), RunIssues, [i,7]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.Tp, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',8), RunIssues, [i,8]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.Te, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',9), RunIssues, [i,9]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.T0, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',10), RunIssues, [i,10]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.Tm, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',11), RunIssues, [i,11]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.Te, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',12), RunIssues, [i,12]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.e, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',13), RunIssues, [i,13]);']);

   eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
   'waveSpectra'  num2str(i) '.stats.v, AquaData.Data.AquaLabSpecData(' ...
   num2str(i) ',14), RunIssues, [i,14]);']);
end;








%[waveSpectra.Spectrum,waveSpectra.frequency] = pwelch(detrend(wave1(4000:end-4000)), hanning(N),0, N, 50);

figure(1);
subplot(2,1,1);
plot(data.d1.time(4000:end-4000),data.d1.wave1(4000:end-4000));
subplot(2,1,2);
plot(1./waveSpectra1.frequency,waveSpectra1.Spectrum,1./waveSpectra2.frequency,waveSpectra2.Spectrum,1./waveSpectra3.frequency,waveSpectra3.Spectrum,1./waveSpectra4.frequency,waveSpectra4.Spectrum);


