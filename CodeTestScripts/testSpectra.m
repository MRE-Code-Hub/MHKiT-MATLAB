function RunIssues = testSpectra(data,outTD,RunIssues)

% function RunIssues = testSpectra()
%
% Tests the wave resource functions and identifies any issues with the
% functionality and calculations
%
% Input:
%   Data            A structure that contains the data used in the testing
%                   of the MHKiT functions
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the power performance scripts
% Output:
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the wave resource module scripts
% Dependencies
%   CalcWaveSpectrum, frequencyMoment, waveNumber, KfromW,
%   OmniDirEnergyFlux, initWaveSpectra
%
% Usage
%   RunIssues = testSpectra(LoadData)
%   runs the wave resource module test scripts using data and logging
%   and issues in RunIssues


parametersd1 = initParameters();
parametersd1.environemnt.waterDensity       = data.d1.waterDensity;  % density of water
parametersd1.environemnt.waterDepth         = data.d1.waterDepth;   % water depth
parametersd1.spectrum.freqRange             = data.d1.freqRange;
parametersd1.data.sampleRate                = 50;
parametersd1.spectrum.NFFT                  = 1024;
parametersd1.spectrum.spectTimeLngth        = 60;
parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.confInterval          = [];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  KfromW
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
frequency = linspace(parametersd1.spectrum.freqRange(1),parametersd1.spectrum.freqRange(end),30);
w = frequency*2*pi;
%kkx = KfromW(w,guessK,parametersd1);


FailIdx = 1;
[RunIssues] = TestFunctionFail('KfromW', ...
    'Not enough input arguments.', ...
    'passed too few arguments, 1 argument passed', ...
    RunIssues, FailIdx, 'input', w, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('KfromW', ...
    'Too many input arguments.', ...
    'passed too many arguments, 3 arguments passed', ...
    RunIssues, FailIdx, 'input', w, parametersd1, 5,... 
    'output', 'k');
FailIdx = FailIdx + 1;

waveSpectrax = initWaveSpectra();
[RunIssues] = TestFunctionFail('KfromW', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'passed spectrum struncture instead of a paramters structure', ...
    RunIssues, FailIdx, 'input', w,waveSpectrax, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

waveSpectrax = initWaveSpectra();
[RunIssues] = TestFunctionFail('KfromW', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'passed a number instead of a paramters structure', ...
    RunIssues, FailIdx, 'input', w,5, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

parametersd1.environemnt.waterDepth         = inf;   % water depth
[RunIssues] = TestFunctionFail('KfromW', ...
    'water depth cannot be deep water (inf)', ...
    'water depth = inf', ...
    RunIssues, FailIdx, 'input', w,parametersd1, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

parametersd1.environemnt.waterDepth         = -6;   % water depth
[RunIssues] = TestFunctionFail('KfromW', ...
    'Invalid water depth', ...
    'water depth = -6', ...
    RunIssues, FailIdx, 'input', w,parametersd1, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

parametersd1.environemnt.waterDepth         = data.d1.waterDepth;  
TestIdx = 1;
[RunIssues, k1t] = TestFunction('KfromW', ...
    'calculate the wave number', ...
    RunIssues, TestIdx, 'input', w,parametersd1, ... 
    'output','k1');
TestIdx = TestIdx + 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  KfromF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FailIdx = 1;
[RunIssues] = TestFunctionFail('KfromF', ...
    'Not enough input arguments.', ...
    'passed too few arguments, 1 argument passed', ...
    RunIssues, FailIdx, 'input', frequency, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('KfromF', ...
    'Too many input arguments.', ...
    'passed too many arguments, 3 arguments passed', ...
    RunIssues, FailIdx, 'input', frequency, parametersd1, 5,... 
    'output', 'k');
FailIdx = FailIdx + 1;

waveSpectrax = initWaveSpectra();
[RunIssues] = TestFunctionFail('KfromF', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'passed spectrum struncture instead of a paramters structure', ...
    RunIssues, FailIdx, 'input', frequency,waveSpectrax, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('KfromF', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'passed a number instead of a paramters structure', ...
    RunIssues, FailIdx, 'input', frequency,5, ... 
    'output', 'k');
FailIdx = FailIdx + 1;

parametersd1.environemnt.waterDepth         = data.d1.waterDepth;  
TestIdx = 1;
[RunIssues, k1t] = TestFunction('KfromF', ...
    'calculate the wave number', ...
    RunIssues, TestIdx, 'input', frequency,parametersd1, ... 
    'output','k1');
TestIdx = TestIdx + 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  CalcWaveSpectrum
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FailIdx = 1;
[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'Incorrect number of input arguments, requires at least 3 arguments, only 2 arguments passed', ...
    'passed too few arguments, 3 arguments passed', ...
    RunIssues, FailIdx, 'input', data.d1.wave1(4000:end-4000),1024, ... 
    'output', 'frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'Incorrect number of input arguments, too many agruments, requires 4 at most, 5 arguments passed', ...
    'passed to many agruments, 9 arguments passed', ...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),1024,50,0.85,'D', ... 
    'output','frequency', 'spectrum', 'freqBinWidth'); 
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveElevation must be a numeric vector with length > 1', ... 
    'passed a character instead of a vector',...
    RunIssues, FailIdx, 'input','D',1024,50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'waveElevation must be a numeric vector with length > 1', ...
    'passed a number instead of a vector',...
    RunIssues, FailIdx, 'input',5,1024,50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),'D',50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is 0',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),0,50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),[1 2],50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is not an integer',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),5.5,50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),1024,'D', ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is 0',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),1024,0, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectrum', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1(4000:end-4000),1024,[1 2], ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
FailIdx = FailIdx + 1;

% running the test scripts and evaluating the results
TestIdx = 1;
%[frequency, spectrum, freqBinWidth] = CalcWaveSpectrum(data.d1.wave1(4000:end-4000),1024,50);
[RunIssues, waveSpectra1] = TestFunction('CalcWaveSpectrum', ...
    'calculate the wave spectra, test 1, NFFT is 1024', ...
    RunIssues, TestIdx, 'input', data.d1.wave1(4000:end-4000), 1024,50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
TestIdx = TestIdx + 1;

[RunIssues, waveSpectra2] = TestFunction('CalcWaveSpectrum', ...
    'calculate the wave spectra, test 1, NFFT is 2048', ...
    RunIssues, TestIdx, 'input', data.d2.wave1(4000:end-4000), 2048,50, ... 
    'output','frequency', 'spectrum', 'freqBinWidth');
TestIdx = TestIdx + 1;

% calculate the wave energy spectra with confidence limits
[RunIssues, waveSpectra3] = TestFunction('CalcWaveSpectrum', ...
    'calculate the wave spectra, test 3,  NFFT is 1024 and confidence limits set to 0.9', ...
    RunIssues, TestIdx, 'input', data.d1.wave1(4000:end-4000),1024,50,0.9, ... 
    'output','frequency', 'spectrum', 'freqBinWidth', 'confLimit');
TestIdx = TestIdx + 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  frequencyMoment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% loading NDBC field data - non-uniformly spaced spectra
NDBCSpecData;

% loading data to test spectral moment calculations
NDBCSpecData
NDBC.frequency    = NDBC_Buoy_Data(1,:);
NDBC.freqBinWidth = NDBC_Buoy_Data(2,:);
NDBC.spectrum1 = NDBC_Buoy_Data(3,:);
NDBC.spectrum2 = NDBC_Buoy_Data(4,:);
NDBC.spectrum3 = NDBC_Buoy_Data(5,:);
NDBC.spectrum4 = NDBC_Buoy_Data(6,:);

FailIdx = 1;
[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'Incorrect number of input arguments, requires at least 3 arguments', ...
    'passed too few arguments, 3 arguments passed', ...
    RunIssues, FailIdx, 'input', NDBC.frequency,NDBC.spectrum1, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'Too many input arguments.', ...
    'passed too many arguments, 5 arguments passed', ...
    RunIssues, FailIdx, 'input', NDBC.frequency,NDBC.spectrum1, NDBC.freqBinWidth, 0, 1, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum and freqBinWidth must be vectors', ... 
    'passed a character instead of a frequency vector',...
    RunIssues, FailIdx, 'input','a',NDBC.spectrum1, NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum and freqBinWidth must be vectors', ...
    'passed a number instead of a frequency vector',...
    RunIssues, FailIdx, 'input',5,NDBC.spectrum1, NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum and freqBinWidth must be vectors', ... 
    'passed a character instead of a spectrum vector',...
    RunIssues, FailIdx, 'input',NDBC.frequency,'a', NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum and freqBinWidth must be vectors', ...
    'passed a number instead of a spectrum vector',...
    RunIssues, FailIdx, 'input',NDBC.frequency,5, NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum and freqBinWidth must be vectors', ... 
    'passed a character instead of a freqBinWidth vector',...
    RunIssues, FailIdx, 'input',NDBC.frequency,NDBC.spectrum1, 'a', 0, ... 
    'output', 'freqMoment');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum and freqBinWidth must be vectors', ...
    'passed a number instead of a freqBinWidth vector',...
    RunIssues, FailIdx, 'input',NDBC.frequency,NDBC.spectrum1, 5, 0, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'frequency vector is shorter that the other two vectors',...
    RunIssues, FailIdx, 'input',NDBC.frequency(1:end-2),NDBC.spectrum1, NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'spectrum vector is shorter that the other two vectors',...
    RunIssues, FailIdx, 'input',NDBC.frequency,NDBC.spectrum1(1:end-2), NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'freqBinWidth vector is shorter that the other two vectors',...
    RunIssues, FailIdx, 'input',NDBC.frequency,NDBC.spectrum1, NDBC.freqBinWidth(1:end-2), 0, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'frequency and freqBinWidth vectors are shorter that the other two vectors',...
    RunIssues, FailIdx, 'input',NDBC.frequency(1:end-2),NDBC.spectrum1, NDBC.freqBinWidth(1:end-2), 0, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'negative frequencies are included in the frequency vector, only postive values are allowed', ...
    'added a negative frequency in the frequency vector',...
    RunIssues, FailIdx, 'input',[NDBC.frequency(1:10) -5 NDBC.frequency(12:end)], NDBC.spectrum1, NDBC.freqBinWidth, 0, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'N must be an integer', ...
    'order of moment is not a character',...
    RunIssues, FailIdx, 'input',NDBC.frequency, NDBC.spectrum1, NDBC.freqBinWidth, 'a', ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('frequencyMoment', ...
    'N must be an integer', ...
    'order of moment is not an integer, 0.5 was used',...
    RunIssues, FailIdx, 'input',NDBC.frequency, NDBC.spectrum1, NDBC.freqBinWidth, 0.5, ... 
    'output', 'freqMoment');
FailIdx = FailIdx + 1;

% running the test scripts and evaluating the results

% calculating the freqBinWidth vector
freqBinWidth = ones(size(waveSpectra1.frequency))*(waveSpectra1.frequency(2)-waveSpectra1.frequency(1));

TestIdx = 1;
[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the 0th spectral moment for an evenly spaced wave spectrum with freq(0) = 0', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency,waveSpectra1.spectrum,freqBinWidth,0, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the 0th spectral moment for an evenly spaced wave spectrum with freq(0) ~= 0', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency(2:end),waveSpectra1.spectrum(2:end),freqBinWidth(2:end),0, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the 0th spectral moment for an unevenly spaced wave spectrum with freq(0) ~= 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency,NDBC.spectrum1,NDBC.freqBinWidth,0, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the 1st spectral moment for an unevenly spaced wave spectrum with freq(0) ~= 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency,NDBC.spectrum2,NDBC.freqBinWidth,1, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the 2th spectral moment for an unevenly spaced wave spectrum with freq(0) ~= 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency,NDBC.spectrum3,NDBC.freqBinWidth,2, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the -1th spectral moment for an unevenly spaced wave spectrum with freq(0) ~= 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency,NDBC.spectrum3,NDBC.freqBinWidth,-1, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

[RunIssues, freqMoment1] = TestFunction('frequencyMoment', ...
    'calculate the 4th spectral moment for an unevenly spaced wave spectrum with freq(0) ~= 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency,NDBC.spectrum4,NDBC.freqBinWidth,4, ... 
    'output', 'freqMoment');
freqMomentData.moment(TestIdx) = freqMoment1.freqMoment;
TestIdx = TestIdx + 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  CalcWaveMoments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FailIdx = 1;
[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'Incorrect number of input arguments, requires at least 2 arguments, only 1 arguments passed', ...
    'passed too few arguments, 1 argument passed', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'Incorrect number of input arguments, too many agruments, requires 3 at most, 5 arguments passed', ...
    'passed too many arguments, 5 passed', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, NDBC.spectrum1, NDBC.freqBinWidth, 6, 1, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a character instead of a frequency vector, with two input arguments',...
    RunIssues, FailIdx, 'input','a', NDBC.spectrum1, ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum and freqBinWidth must both be vectors', ...
    'passed a character instead of a frequency vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', 'a', NDBC.spectrum1, NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a number instead of a frequency vector, with two input arguments',...
    RunIssues, FailIdx, 'input',5, NDBC.spectrum1, ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum and freqBinWidth must both be vectors', ...
    'passed a number instead of a frequency vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', 5, NDBC.spectrum1, NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a character instead of a spectrum vector, with two input arguments',...
    RunIssues, FailIdx, 'input',NDBC.frequency, 'a', ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum and freqBinWidth must both be vectors', ...
    'passed a character instead of a spectrum vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, 'a', NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a number instead of a spectrum vector, with two input arguments',...
    RunIssues, FailIdx, 'input',NDBC.frequency, 5, ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum and freqBinWidth must both be vectors', ...
    'passed a number instead of a spectrum vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, 5, NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum and freqBinWidth must both be vectors', ...
    'passed a character instead of a freqBinWidth vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, 5, 'a', ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum and freqBinWidth must both be vectors', ...
    'passed a number instead of a freqBinWidth, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, NDBC.spectrum1, 5, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency and spectrum must be the same length', ... 
    'frequency vector is shorter that the other vector, with two input arguments',...
    RunIssues, FailIdx, 'input',NDBC.frequency(1:end-2), NDBC.spectrum1, ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'frequency vector is shorter that the other two vectors, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency(1:end-2), NDBC.spectrum1, NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency and spectrum must be the same length', ... 
    'spectrum vector is shorter that the other vector, with two input arguments',...
    RunIssues, FailIdx, 'input',NDBC.frequency, NDBC.spectrum1(1:end-2), ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'spectrum vector is shorter that the other two vectors, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, NDBC.spectrum1(1:end-2), NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'freqBinWidth vector is shorter that the other two vectors, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, NDBC.spectrum1, NDBC.freqBinWidth(1:end-2), ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency, spectrum, and freqBinWidth must be the same length', ...
    'frequency and freqBinWidth vectors are shorter that the other spectrum vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency(1:end-2), NDBC.spectrum1, NDBC.freqBinWidth(1:end-2), ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'frequency vector is not evenly spaced', ... 
    'frequency vector is not evenly spaced, with two input arguments',...
    RunIssues, FailIdx, 'input',NDBC.frequency, NDBC.spectrum1, ... 
    'output', 'waveMoments');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'negative frequencies are included in the frequency vector, only postive values are allowed', ...
    'added a negative frequency in the frequency vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', [NDBC.frequency(1:10) -5 NDBC.frequency(12:end)], NDBC.spectrum1, NDBC.freqBinWidth, ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveMoments', ...
    'negative frequencies are included in the freqBinWidth vector, only postive values are allowed', ...
    'added a negative frequency in the freqBinWidth vector, with three input arguments', ...
    RunIssues, FailIdx, 'input', NDBC.frequency, NDBC.spectrum1, [NDBC.freqBinWidth(1:10) -5 NDBC.freqBinWidth(12:end)], ... 
    'output', 'waveMoments');
FailIdx = FailIdx + 1;

% running the test scripts and evaluating the results
TestIdx = 1;

[RunIssues, waveMoments1] = TestFunction('CalcWaveMoments', ...
    'calculate the wave moments for an evenly spaced wave spectrum with freq(0) = 0', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency,waveSpectra1.spectrum, ... 
    'output', 'wavemoments');
waveMomentData = waveMoments1.wavemoments;
waveMomentNames = fieldnames(waveMomentData);
TestIdx = TestIdx + 1;

[RunIssues, waveMoments1] = TestFunction('CalcWaveMoments', ...
    'calculate the wave moments for an unevenly spaced wave spectrum with freq(0) = 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency, NDBC.spectrum1, NDBC.freqBinWidth, ... 
    'output', 'wavemoments');
for i = 1:length(waveMomentNames)
    waveMomentData.(waveMomentNames{i}) = [waveMomentData.(waveMomentNames{i}),waveMoments1.wavemoments.(waveMomentNames{i})]; 
end;
TestIdx = TestIdx + 1;

[RunIssues, waveMoments1] = TestFunction('CalcWaveMoments', ...
    'calculate the wave moments for an unevenly spaced wave spectrum with freq(0) = 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency, NDBC.spectrum2, NDBC.freqBinWidth, ... 
    'output', 'wavemoments');
for i = 1:length(waveMomentNames)
    waveMomentData.(waveMomentNames{i}) = [waveMomentData.(waveMomentNames{i}),waveMoments1.wavemoments.(waveMomentNames{i})]; 
end;
TestIdx = TestIdx + 1;

[RunIssues, waveMoments1] = TestFunction('CalcWaveMoments', ...
    'calculate the wave moments for an unevenly spaced wave spectrum with freq(0) = 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency, NDBC.spectrum3, NDBC.freqBinWidth, ... 
    'output', 'wavemoments');
for i = 1:length(waveMomentNames)
    waveMomentData.(waveMomentNames{i}) = [waveMomentData.(waveMomentNames{i}),waveMoments1.wavemoments.(waveMomentNames{i})]; 
end;
TestIdx = TestIdx + 1;

[RunIssues, waveMoments1] = TestFunction('CalcWaveMoments', ...
    'calculate the wave moments for an unevenly spaced wave spectrum with freq(0) = 0', ...
    RunIssues, TestIdx, 'input',NDBC.frequency, NDBC.spectrum4, NDBC.freqBinWidth, ... 
    'output', 'wavemoments');
for i = 1:length(waveMomentNames)
    waveMomentData.(waveMomentNames{i}) = [waveMomentData.(waveMomentNames{i}),waveMoments1.wavemoments.(waveMomentNames{i})]; 
end;
TestIdx = TestIdx + 1;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  OmniDirEnergyFlux
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%*%

%J = OmniDirEnergyFlux(frequency, spectrum,parameters,deepWaterFlag,'freqBinWidth',freqBinWidth,'k',k)

% calculating the wave number that will be used to test OmniDirEnergyFlux
k = KfromF(waveSpectra1.frequency,parametersd1);

FailIdx = 1;
[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'Not enough input arguments.', ...
    'passed too few arguments, 2 arguments passed', ...
    RunIssues, FailIdx, 'input', waveSpectra1.frequency, waveSpectra1.spectrum,  ... 
    'output', 'J');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'Incorrect number of input arguments, too many agruments, requires 8 at most', ...
    'passed too few arguments, 9 arguments passed', ...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'D','freqBinWidth',waveSpectra1.freqBinWidth,'k',k,5,  ... 
    'output', 'J');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a character instead of a frequency vector',...
    RunIssues, FailIdx, 'input','a', waveSpectra1.spectrum,parametersd1, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a number instead of a frequency vector',...
    RunIssues, FailIdx, 'input',5, waveSpectra1.spectrum,parametersd1, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a character instead of a spectrum vector',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, 'a',parametersd1, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency and spectrum must both be vectors', ... 
    'passed a number instead of a spectrum vector',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, 5,parametersd1, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency and spectrum must be the same length', ... 
    'frequency vector is shorter than the spectrum, only 3 arguments',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency(1:end-2), waveSpectra1.spectrum,parametersd1, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency and spectrum must be the same length', ... 
    'spectrum vector is shorter than the frequency vector, only 3 arguments',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum(1:end-2),parametersd1, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

waveSpectrax = initWaveSpectra();
[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'passed spectrum struncture instead of a paramters structure', ...
    RunIssues, FailIdx, 'input', waveSpectra1.frequency, waveSpectra1.spectrum,waveSpectrax, ... 
    'output', 'J');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'passed a number instead of a paramters structure', ...
    RunIssues, FailIdx, 'input', waveSpectra1.frequency, waveSpectra1.spectrum,5, ... 
    'output', 'J');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'freqBinWidth must be a vector of numbers', ... 
    'passed a character instead of a freqBinWidth vector',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth','a', ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'freqBinWidth must be a vector of numbers', ... 
    'passed a number instead of a freqBinWidth vector',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth',5, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency, spectrum and freqBinWidth must be the same length', ...
    'freqBinWidth vector is shorter that the other two vectors', ...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth(1:end-2), ... 
    'output', 'J');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'k must be a vector of numbers', ... 
    'passed a character instead of a k vector',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k','a', ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'k must be a vector of numbers', ... 
    'passed a number instead of a k vector',...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k',5, ... 
    'output', 'J');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'frequency, spectrum, and k must be the same length', ...
    'k vector is shorter that the other two vectors', ...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k', k(1:end-2),... 
    'output', 'J');
FailIdx = FailIdx + 1;

parametersd1.environemnt.waterDepth = -6;
[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'Invalid water depth', ...
    'water depth is -6', ...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k', k,... 
    'output', 'J');
FailIdx = FailIdx + 1;

parametersd1.environemnt.waterDepth = 'a';
[RunIssues] = TestFunctionFail('OmniDirEnergyFlux', ...
    'Invalid water depth', ...
    'water depth is a character', ...
    RunIssues, FailIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k', k,... 
    'output', 'J');
FailIdx = FailIdx + 1;
parametersd1.environemnt.waterDepth         = data.d1.waterDepth;   % water depth


% running the test scripts and evaluating the results
TestIdx = 1;
% OmniDirEnergyFlux(waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1)
% OmniDirEnergyFlux(waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth)
% OmniDirEnergyFlux(waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k', k)
[RunIssues, J1] = TestFunction('OmniDirEnergyFlux', ...
    'calculate the wave energy flux for aquaharomnics data, no variable agruments', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1, ... 
    'output', 'J');
JData(TestIdx) = J1.J;
TestIdx = TestIdx + 1;

[RunIssues, J1] = TestFunction('OmniDirEnergyFlux', ...
    'calculate the wave energy flux for aquaharomnics data, freqBinWidth Included', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth, ... 
    'output', 'J');
JData(TestIdx) = J1.J;
TestIdx = TestIdx + 1;

[RunIssues, J1] = TestFunction('OmniDirEnergyFlux', ...
    'calculate the wave energy flux for aquaharomnics data, freqBinWidth  and k Included', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'freqBinWidth', waveSpectra1.freqBinWidth,'k', k, ... 
    'output', 'J');
JData(TestIdx) = J1.J;
TestIdx = TestIdx + 1;

[RunIssues, J1] = TestFunction('OmniDirEnergyFlux', ...
    'calculate the wave energy flux for aquaharomnics data, forced deep water', ...
    RunIssues, TestIdx, 'input',waveSpectra1.frequency, waveSpectra1.spectrum,parametersd1,'D', ... 
    'output', 'J');
JData(TestIdx) = J1.J;
TestIdx = TestIdx + 1;

[RunIssues, J1] = TestFunction('OmniDirEnergyFlux', ...
    'calculate the wave energy flux for NDBC data, uneven freqBinWidth', ...
    RunIssues, TestIdx, 'input',NDBC.frequency, NDBC.spectrum3,parametersd1,'freqBinWidth', NDBC.freqBinWidth, ... 
    'output', 'J');
JData(TestIdx) = J1.J;
TestIdx = TestIdx + 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  CalcWaveSpectrumST
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


FailIdx = 1;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Not enough input arguments.', ...
    'passed too few arguments, 3 arguments passed', ...
    RunIssues, FailIdx, 'input', data.d1.wave1,data.d1.time,  ... 
    'output', 'spectrumSTdt');
FailIdx = FailIdx + 1;

%spectrumST = CalcWaveSpectraST(data.d1.wave1,data.d1.time,parametersd1,'D',[0.05 0.25], 5);
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Incorrect number of input arguments, too many agruments, requires 5 at most, 6 arguments passed', ...
    'passed to many agruments, 6 arguments passed', ...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1,'D',[0.05 0.25], 5, ... 
    'output','spectrumSTdt'); 
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'waveElevation must be a numeric vector with length > 1', ... 
    'passed a character instead of a vector',...
    RunIssues, FailIdx, 'input','D',data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');     
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'waveElevation must be a numeric vector with length > 1', ...
    'passed a number instead of a vector',...
    RunIssues, FailIdx, 'input',5,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'dateTime must be a numeric vector with length > 1', ...
    'passed a character instead of a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,'D',parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'dateTime must be a numeric vector with length > 1', ...
    'passed a number instead of a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,5,parametersd1, ... 
    'output', 'spectrumSTdt'); 
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'waveElevation and dateTime must be the same length', ...
    'waveElevation and dateTime are vectors with different lengths',...
    RunIssues, FailIdx, 'input',data.d1.wave1(1:end-2),data.d1.time,parametersd1, ... 
    'output','spectrumSTdt'); 
FailIdx = FailIdx + 1;

parametersd1.spectrum.NFFT            = 'B';
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1,... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.NFFT            = 0;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is 0',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.NFFT            = [1 2 3];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.NFFT            = 1024.6;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'NFFT must be an integer greater than 0', ...
    'NFFT is not an integer',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;
parametersd1.spectrum.NFFT            = 1024;

parametersd1.data.sampleRate          = 'a';
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.data.sampleRate          = 0
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is 0',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.data.sampleRate          = [1 2 3];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'SampleRate must be an number greater than 0', ...
    'sample rate is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.data.sampleRate          = 50;
parametersd1.spectrum.spectTimeLngth      = 'a';
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'spectTimeLngth must be an number greater than NFFT/sampleRate', ...
    'spectTimeLngth is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.spectTimeLngth      = parametersd1.spectrum.NFFT/parametersd1.data.sampleRate*0.95;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'spectTimeLngth must be an number greater than NFFT/sampleRate', ...
    'spectTimeLngth is 0',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.spectTimeLngth      = [1 2 3];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'spectTimeLngth must be an number greater than NFFT/sampleRate', ...
    'spectTimeLngth is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;
parametersd1.spectrum.spectTimeLngth            = 60;

waveSpectraST = initWaveSpectra();
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'pass a wave spectrum structure insteate of a parameters structure',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,waveSpectraST, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'pass a number insteate of a parameters structure',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,6, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.freqRange = 6;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'freqRange must be a vector of reals with a length of 2', ...
    'freqRange is a number',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.freqRange = 'a';
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'freqRange must be a vector of reals with a length of 2', ...
    'freqRange is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.freqRange = [6 4 6];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'freqRange must be a vector of reals with a length of 2', ...
    'freqRange has 3 elements instead of 2',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.freqRange = [6 4];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'freqRange values must be great than 0 with the second element greater than the first', ...
    'first element of freqRange is greater than the first',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.freqRange = [-6 4];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'freqRange values must be great than 0 with the second element greater than the first', ...
    'first element of freqRange is greater than the first',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;
parametersd1.spectrum.freqRange             = data.d1.freqRange;

parametersd1.spectrum.spectraTimeSpacing      = 'a';
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'spectraTimeSpacing must be an number greater than or equal to spectTimeLngth', ...
    'spectraTimeSpacing is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.spectraTimeSpacing      = parametersd1.spectrum.spectTimeLngth*0.95;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'spectraTimeSpacing must be an number greater than or equal to spectTimeLngth', ...
    'spectraTimeSpacing is less than spectTimeLngth',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.spectraTimeSpacing      = [1 2 3];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'spectraTimeSpacing must be an number greater than or equal to spectTimeLngth', ...
    'spectraTimeSpacing is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;
parametersd1.spectrum.spectraTimeSpacing    = 120;

parametersd1.spectrum.confInterval            = 'B';
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'confLimit must be a number between 0 and 1', ...
    'confLimit is a character',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1,... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.confInterval            = 0;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'confLimit must be a number between 0 and 1', ...
    'confLimit is 0',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.confInterval            = 1;
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'confLimit must be a number between 0 and 1', ...
    'confLimit is 1',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

parametersd1.spectrum.confInterval            = [1 2 3];
[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'confLimit must be a number between 0 and 1', ...
    'confLimit is a vector',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, ... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;
parametersd1.spectrum.confInterval            = [];

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Invalid input arguments, unrecongnized flag or input argument', ...
    'variable argument is a C',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, 'C',... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Invalid input arguments, unrecongnized flag or input argument', ...
    'variable argument is a 5',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, '5',... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'Invalid input arguments, unrecongnized flag or input argument', ...
    'variable argument is a three element vector [5 6 7]',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, [5 6 7],... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'timeRange must be vector with two elements with the second element larger than the first', ...
    'variable argument is a 2 element vector with the first element larger than the second',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, [198.1 22.5],... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'timeRange must be vector with two elements with the second element larger than the first', ...
    'variable argument is a 2 element vector with the first element a negative number',...
    RunIssues, FailIdx, 'input',data.d1.wave1,data.d1.time,parametersd1, [-198.1 22.5],... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'start time is not within the range of dateTime', ...
    'the start time is outside the range of datetime',...
    RunIssues, FailIdx, 'input',data.d1.wave1(3:end),data.d1.time(3:end)/24/3600,parametersd1, [data.d1.time(1) data.d1.time(end-10)]/24/3600,... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcWaveSpectraST', ...
    'end time is not within the range of dateTime', ...
    'the start time is outside the range of datetime',...
    RunIssues, FailIdx, 'input',data.d1.wave1(3:end),data.d1.time(3:end)/24/3600,parametersd1, [data.d1.time(2) data.d1.time(end)+2/parametersd1.data.sampleRate]/24/3600,... 
    'output','spectrumSTdt');
FailIdx = FailIdx + 1;


% running the test scripts and evaluating the results
TestIdx = 1;
parametersd1.spectrum.freqRange             = [];
parametersd1.spectrum.confInterval          = [];
parametersd1.spectrum.spectraTimeSpacing    = [];
parametersd1.spectrum.spectTimeLngth        = [];
waveSpectrumST = CalcWaveSpectraST(data.d1.wave1,data.d1.time/24/3600,parametersd1);

[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = [], one spectrum should be calculated from the entire time series', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.spectTimeLngth        = [];
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = 120, all spectra should be calculated from a 120s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = [];
parametersd1.spectrum.spectTimeLngth        = 60;
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = 120, all spectra should be calculated from a 120s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.spectTimeLngth        = 60;
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = 60, spectraTimeSpacing = 120, all spectra should be calculated from a 60s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = 60, spectraTimeSpacing = 120, timeRange = [120, 600], all spectra should be calculated from a 60s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1,[120,120*5]/24/3600, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = [];
parametersd1.spectrum.spectTimeLngth        = [];
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = [], timeRange = [120, 600], one spectrum should be calculated within timeRange', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1,[120,120*5]/24/3600, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.confInterval          = [0.8];
parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.spectTimeLngth        = [];

waveSpectrumSTxy = CalcWaveSpectraST(data.d1.wave1,data.d1.time/24/3600,parametersd1); 
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = 120, all spectra should be calculated from a 120s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = [];
parametersd1.spectrum.spectTimeLngth        = 60;
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = 120, all spectra should be calculated from a 120s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.spectTimeLngth        = 60;
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = 60, spectraTimeSpacing = 120, all spectra should be calculated from a 60s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;




parametersd1.spectrum.freqRange             = data.d1.freqRange;
parametersd1.spectrum.spectraTimeSpacing    = [];
parametersd1.spectrum.spectTimeLngth        = [];
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = [], timeRange = [120, 600], one spectrum should be calculated within timeRange', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1,[120,120*5]/24/3600, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.confInterval          = [0.8];
parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.spectTimeLngth        = [];

waveSpectrumSTxy = CalcWaveSpectraST(data.d1.wave1,data.d1.time/24/3600,parametersd1); 
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = 120, all spectra should be calculated from a 120s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = [];
parametersd1.spectrum.spectTimeLngth        = 60;
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = [], spectraTimeSpacing = 120, all spectra should be calculated from a 120s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.spectTimeLngth        = 60;
[RunIssues, waveSpectrumST1] = TestFunction('CalcWaveSpectraST', ...
    'spectTimeLngth = 60, spectraTimeSpacing = 120, all spectra should be calculated from a 60s time series and spaced at 120s', ...
    RunIssues, TestIdx, 'input',data.d1.wave1,data.d1.time/24/3600,parametersd1, ... 
    'output', 'waveSpectrumSTdt');
waveSpectrumSTData(TestIdx) = waveSpectrumST1.waveSpectrumSTdt;
TestIdx = TestIdx + 1;

save dadata;
return;



% % testing the error checking in CalcWaveSpectrum
% FailIdx = 1;
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Incorrect number of input arguments, requires at least 4 arguments, only 3 arguments passed', ...
%     'passed too few arguments, 3 arguments passed', ...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Incorrect number of input arguments, too many agruments, requires 8 at most, 9 arguments passed', ...
%     'passed to many agruments, 9 arguments passed', ...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D',0.85,'D');         
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'waveElevation must be a numeric vector with length > 1', ... 
%     'passed a character instead of a vector',...
%     RunIssues, FailIdx, 'D',data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D',0.85);      
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'waveElevation must be a numeric vector with length > 1', ...
%     'passed a number instead of a vector',...
%     RunIssues, FailIdx, 5,data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D',0.85);      
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'waveTime must be a numeric vector with length > 1', ...
%     'passed a character instead of a vector',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),'D',1024,50,parameters,freqRange,'D',0.85);    
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'waveTime must be a numeric vector with length > 1', ...
%     'passed a number instead of a vector',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),5,1024,50,parameters,freqRange,'D',0.85); 
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'waveElevation and waveTime must be the same length', ...
%     'waveElevation and waveTime are vectors with different lengths',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-3900),1024,50,parameters,freqRange,'D',0.85); 
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'NFFT must be an integer greater than 0', ...
%     'NFFT is a character',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),'D',50,parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'NFFT must be an integer greater than 0', ...
%     'NFFT is 0',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),0,50,parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'NFFT must be an integer greater than 0', ...
%     'NFFT is a vector',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),[1 2],50,parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'NFFT must be an integer greater than 0', ...
%     'NFFT is not an integer',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),5.5,50,parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'SampleRate must be an number greater than 0', ...
%     'sample rate is a character',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,'D',parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'SampleRate must be an number greater than 0', ...
%     'sample rate is 0',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,0,parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'SampleRate must be an number greater than 0', ...
%     'sample rate is a vector',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,[1 2],parameters,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Invalid Structure input, must by type Parameters', ...
%     'Parameters input is a Spectrum structure',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,TestSpectrum,freqRange,'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Invalid input argument, freqRange must be a vector of length 2', ...
%     'Frequency range vector has a length of 3',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,[1 2 3],'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Invalid input argument, freqRange values must be greater than 0', ...
%     'frequency range vector has a negative number',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,[-2 1],'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Invalid input argument, freqRange, second element must be greater that the first', ...
%     'The second element of the frequency range vector ',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,[3 2],'D',0.85);
% 
% [RunIssues, FailIdx] = TestFunctionFail('CalcWaveSpectrum', ...
%     'Invalid input arguments, unrecongnized flag or input argumjent', ...
%     'Using character P instead of D for the depth input',...
%     RunIssues, FailIdx, data.d1.wave1(4000:end-4000),data.d1.wave1(4000:end-4000),1024,50,parameters,freqRange,'P',0.85);
% 
% % running the test scripts and evaluating the results
% TestIdx = 1;
% [RunIssues, TestIdx, waveSpectra1] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 1, no optional parameters', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50);
% 
% [RunIssues, TestIdx, waveSpectra2] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 2, with parameters structure', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters);
% 
% [RunIssues, TestIdx, waveSpectra3] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 3, with freqRange', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,freqRange);
% 
% [RunIssues, TestIdx, waveSpectra4] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 4, parameters and freqRange', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,freqRange);
% 
% [RunIssues, TestIdx, waveSpectra5] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 5, parameters and freqRange with reversed locations', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,freqRange,parameters);
% 
% % calculate the wave energy spectra, test 6, with deep water flag set
% [RunIssues, TestIdx, waveSpectra6] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 6, with deep water flag set', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,'D');
% 
% [RunIssues, TestIdx, waveSpectra7] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 7, with parameters and deep water flag set', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,'D');
% 
% [RunIssues, TestIdx, waveSpectra8] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 8, with parameters, deep water flag, and frequency range', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,parameters,freqRange,'D');
% 
% [RunIssues, TestIdx, waveSpectra9] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 9, with parameters and deep water flag, and frequency range reversed in position', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,freqRange,parameters,'D');
% 
% [RunIssues, TestIdx, waveSpectra10] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 10, with parameters, deep water flag, and frequency range in reversed in position', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,'D',freqRange,parameters);
% 
% % calculate the wave energy spectra with confidence limits
% [RunIssues, TestIdx, waveSpectra11] = TestFunction('CalcWaveSpectrum', 1, ...
%     'calculate the wave spectra, test 11, with parameters, deep water flag, frequency range and confidence limits', ...
%     RunIssues, TestIdx, data.d1.wave1(4000:end-4000),data.d1.time(4000:end-4000),1024,50,1,freqRange,parameters,0.95);
% 
% % only use this for creating the test data file
% % for i = 1:11
% %     i
% %     num2str(i)
% %     ['AquaData.Data.AquaLabSpecData(' num2str(i) ', 1 ) = waveSpectra'  num2str(i) '.props.TimeSeriesDuration;']
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 1 ) = waveSpectra'  num2str(i) '.props.TimeSeriesDuration;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 2 ) = waveSpectra'  num2str(i) '.props.numSamples;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 3 ) = waveSpectra'  num2str(i) '.props.sampleRate;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 4 ) = waveSpectra'  num2str(i) '.environment.waterDepth;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 5 ) = waveSpectra'  num2str(i) '.environment.waterDensity;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 6 ) = waveSpectra'  num2str(i) '.environment.g;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 7 ) = waveSpectra'  num2str(i) '.stats.Hm0;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 8 ) = waveSpectra'  num2str(i) '.stats.Tp;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 9 ) = waveSpectra'  num2str(i) '.stats.Te;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 10 ) = waveSpectra'  num2str(i) '.stats.T0;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 11 ) = waveSpectra'  num2str(i) '.stats.Tm;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 12 ) = waveSpectra'  num2str(i) '.stats.Te;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 13 ) = waveSpectra'  num2str(i) '.stats.e;']);
% %     eval(['AquaData.Data.AquaLabSpecData(' num2str(i) ', 14 ) = waveSpectra'  num2str(i) '.stats.v;']);
% %     eval(['AquaData.Data.AquaLabSpectra' num2str(i) ' = waveSpectra'  num2str(i) '.Spectrum;']);
% %     eval(['AquaData.Data.AquaLabFrequency' num2str(i) ' = waveSpectra'  num2str(i) '.frequency;']);
% %     eval(['AquaData.Data.AquaLabUpper95Conf' num2str(i) ' = waveSpectra'  num2str(i) '.Upper95Conf;']);
% %     eval(['AquaData.Data.AquaLabLower95Conf' num2str(i) ' = waveSpectra'  num2str(i) '.Lower95Conf;']);
% % end;
% % save testDataSpectra1 AquaData
% 
% 
% 
% % testing the calculations 
% load testDataSpectra1.mat;
% 
% for i = 1:11
%     
%     %(functionName, CompLog, TargetData, TestData, RunIssues,INDX)
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.props.TimeSeriesDuration, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',1), RunIssues, [i,1]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.props.numSamples, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',2), RunIssues, [i,2]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.props.sampleRate, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',3), RunIssues, [i,3]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.environment.waterDepth, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',4), RunIssues, [i,4]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.environment.waterDensity, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',5), RunIssues, [i,5]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.environment.g, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',6), RunIssues, [i,6]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.Hm0, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',7), RunIssues, [i,7]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.Tp, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',8), RunIssues, [i,8]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.Te, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',9), RunIssues, [i,9]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.T0, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',10), RunIssues, [i,10]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.Tm, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',11), RunIssues, [i,11]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.Te, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',12), RunIssues, [i,12]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.e, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',13), RunIssues, [i,13]);']);
% 
%    eval(['RunIssues = TestData(''CalcWaveSpectrum'',''TestDataSpectra1'',' ...
%    'waveSpectra'  num2str(i) '.stats.v, AquaData.Data.AquaLabSpecData(' ...
%    num2str(i) ',14), RunIssues, [i,14]);']);
% end;
% 
% 
% 
% 
% 
% 
% 
% 
% %[waveSpectra.Spectrum,waveSpectra.frequency] = pwelch(detrend(wave1(4000:end-4000)), hanning(N),0, N, 50);
% 
% figure(1);
% subplot(2,1,1);
% plot(data.d1.time(4000:end-4000),data.d1.wave1(4000:end-4000));
% subplot(2,1,2);
% plot(1./waveSpectra1.frequency,waveSpectra1.Spectrum,1./waveSpectra2.frequency,waveSpectra2.Spectrum,1./waveSpectra3.frequency,waveSpectra3.Spectrum,1./waveSpectra4.frequency,waveSpectra4.Spectrum);
% 

