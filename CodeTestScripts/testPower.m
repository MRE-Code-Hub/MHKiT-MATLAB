function RunIssues = testPower(data,outTD,RunIssues)

% function RunIssues = testPower()
%
% Tests the PowerMeasurements functions and identifies any issues with the
% functionality and calculations
%
% Input:
%   Data            A structure that contains the data used in the testing
%                   of the MHKiT functions
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the power performance scripts
% Output:
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the wave resource module scripts
% Dependencies
%   CalcPowerWindow, initPowerData, initPowerStats, CalcPowerDC,
%
% Usage
%   RunIssues = testSpectra(LoadData)
%   runs the Power Measurements module test scripts using data and logging
%   and issues in RunIssues

powerdata=initPowerData();
powerstats=initPowerStats();

parametersd1 = initParameters();
parametersd1.environemnt.waterDensity       = data.d1.waterDensity;  % density of water
parametersd1.environemnt.waterDepth         = data.d1.waterDepth;   % water depth
parametersd1.spectrum.freqRange             = data.d1.freqRange;
parametersd1.data.sampleRate                = 50;
parametersd1.spectrum.NFFT                  = 1024;
parametersd1.spectrum.spectTimeLngth        = 60;
parametersd1.spectrum.spectraTimeSpacing    = 120;
parametersd1.spectrum.confInterval          = [];


%%%%%%%%%%%%%%%%%%%%%%%%
%CalcPowerWindow
%%%%%%%%%%%%%%%%%%%%%%%%

% testing the error checking in CalcPowerWindow
FailIdx = 1;
 [RunIssues] = TestFunctionFail('CalcPowerWindow', ...
     'Incorrect number of input arguments, requires at lest 5 arguments, 3 arguments passed', ...
     'Only 3 arguments passed',...
     RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data','output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'Incorrect number of input arguments, too many arguments, requires at most 6, 8 arguments passed', ...
    '9 arguments passed',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data',outTD.Time_Domain.Time.data',parametersd1,600,300,5,...
    'output','powerdata');
 FailIdx = FailIdx + 1;                   
 [RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'voltage must be a numeric matrix with length > 1', ...
    'voltage is not in correct form',...
    RunIssues, FailIdx,'input', 1,outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data',outTD.Time_Domain.Time.data',parametersd1,'output','powerdata');
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'Invalid input, parameters must by struture of type Parameters', ...
    'Parameters is not a structure',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data',outTD.Time_Domain.Time.data',1,'output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'Current must be a numeric matrix with lenght >1', ...
    'current is not in the correct form',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data',1,outTD.Time_Domain.Time.data',outTD.Time_Domain.Time.data',parametersd1,'output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'Time must be a numeric vector with lenght >1', ...
    'time is not in the correct form',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',1,outTD.Time_Domain.Time.data',parametersd1,'output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'Current and voltage arrays must be same size', ...
    'current and voltage are not the same size',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:30)',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data',outTD.Time_Domain.Time.data',parametersd1,...
    'output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'Time input is not same length as current or voltage dimension', ...
    'time is not the same length as current and voltage',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data(1,3:50)',outTD.Time_Domain.Time.data',parametersd1,...
    'output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'start time is not within the range of dateTime', ...
    'invalid start time',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)'/24/3600,outTD.Time_Domain.Time.data(1,2:50)'/24/3600,parametersd1,...
    [outTD.Time_Domain.Time.data(1,1) outTD.Time_Domain.Time.data(1,40)]/24/3600,'output','powerdata');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerWindow', ...
    'end time is not within the range of dateTime', ...
    'invalid end time',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)',...
    parametersd1,[outTD.Time_Domain.Time.data(1,3) outTD.Time_Domain.Time.data(1,70)],'output','powerdata');

FailIdx = FailIdx + 1;
%%%%%% Test CalcPowerDC%%%%%%%%%%%%
FailIdx = 1;                
  [RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'Incorrect number of input arguments, reguires at lest 4 arguments, 3 arguments passed', ...
    'too few arguments',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)','output','powerstats');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'Incorrect numner of input arguments, too many arguments, requires at most 4, 8 arguments passed', ...
    'too many arguments',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)',...
                    data.d1.sampleRate,outTD.Time_Domain.Time.data(1,2:50)',50,400,outTD.Time_Domain.Time.data(1,2:50)','output','powerstats');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'voltage must be a numeric matrix with length > 1', ...
    'voltage type or length wrong',...
    RunIssues, FailIdx,'input', 'voltage',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)',...
                    data.d1.sampleRate,'output','powerstats');
FailIdx = FailIdx + 1;                
[RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'Current must be a numeric matrix with length >1', ...
    'current type or length wrong',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',['current','curent2'],outTD.Time_Domain.Time.data(1,2:50)',...
                    data.d1.sampleRate,'output','powerstats');
FailIdx = FailIdx + 1;                
[RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'Time must be a numeric vector with length >1', ...
    'Time type or length wrong',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',['current','curent2'],...
                    data.d1.sampleRate,'output','powerstats');
FailIdx = FailIdx + 1;                
[RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'Current and voltage arrays must be same size', ...
    'current and voltage length do not match',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:59)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)',...
                    data.d1.sampleRate,'output','powerstats');
FailIdx = FailIdx + 1;                
[RunIssues] = TestFunctionFail('CalcPowerDC', ...
    'Time input is not same length as current or voltage dimension', ...
    'current and voltage do not match time',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:90)',...
                    data.d1.sampleRate,'output','powerstats'); 
FailIdx = FailIdx + 1;                
%%%%%% Test CalcCaptureLength %%%%%%%%%%%%%%%
FailIdx = 1;
[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'Incorrect number of input arguments, requires 2 arguments, 1 arguments passed', ...
    'too few arguments',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)','output','CaptureLength'); 
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'Incorrect number of input arguments, too many arguments, requires at most 2, 4 arguments passed', ...
    'too many arguments',...
    RunIssues, FailIdx,'input', outTD.Time_Domain.Vdc_V.data(1,2:50)',outTD.Time_Domain.Idc_A.data(1,2:50)',outTD.Time_Domain.Time.data(1,2:50)',...
    20,'output','CaptureLength');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'power must be a numeric matrix with length > 1', ...
    'power must be a matrix longer than 1',...
    RunIssues, FailIdx,'input', 20,outTD.Time_Domain.Idc_A.data(1,2:50)','output','CaptureLength');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'power must be a numeric matrix with length > 1', ...
    'power must be numeric type',...
    RunIssues, FailIdx,'input', ['red','cat','dog'],outTD.Time_Domain.Idc_A.data(1,2:50)','output','CaptureLength');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'waveEnergy must be a numeric matrix with lenght >1', ...
    'waveEnergy must be a matrix longer than 1',...
    RunIssues, FailIdx,'input',outTD.Time_Domain.Vdc_V.data(1,2:50)',20,'output','CaptureLength');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'waveEnergy must be a numeric matrix with lenght >1', ...
    'waveEnergy must be numeric type',...
    RunIssues, FailIdx,'input',outTD.Time_Domain.Vdc_V.data(1,2:50)', ['red','cat','dog'],'output','CaptureLength');
FailIdx = FailIdx + 1;


[RunIssues] = TestFunctionFail('CalcCaptureLength', ...
    'power and waveEnergy need to be the same size', ...
    'power and waveEnergy not same size',...
    RunIssues, FailIdx,'input',[data.d1.time(4000:end-4000);data.d1.time(4000:end-4000)],data.d1.time(4000:end-3000),'output','CaptureLength');
FailIdx = FailIdx + 1;
%%%%%%% Test CalcCaptureLengthMatrix %%%%%%%%%%%%
FailIdx = 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Incorrect number of input arguments, requires 9 arguments, 3 arguments passed', ...
    'too few arguments passed',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Incorrect number of input arguments, too many arguments, requires at most 9, 11 arguments passed', ...
    'too many arguments passed',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    data.d1.time(2000:end-3000),0.5,1.0,0.0,7.5,0.0,18.0,12,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'CapLength must be a numeric matrix with length > 1', ...
    'CapLength must be longer than length 1',...
    RunIssues, FailIdx,'input',3,data.d1.time(2000:end-3000),...
    data.d1.time(2000:end-3000),0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'CapLength must be a numeric matrix with length > 1', ...
    'CapLength must be numeric type',...
    RunIssues, FailIdx,'input',['cat','frog','good'],data.d1.time(2000:end-3000),...
    data.d1.time(2000:end-3000),0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;


[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Hmo must be a numeric matrix with lenght >1', ...
    'Hmo must be vector longer than 1',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),12,...
    data.d1.time(2000:end-3000),0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Hmo must be a numeric matrix with lenght >1', ...
    'Hmo must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),['cat','frog','bog'],...
    data.d1.time(2000:end-3000),0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Te must be a numeric matrix with lenght >1', ...
    'Te must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),['cat','frog','bog'],...
    0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Te must be a numeric matrix with lenght >1', ...
    'Te must be lenght greater than 1',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),12,...
    0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoBinSize needs to be a scalar of numeric type', ...
    'HmoBinSize must be a scalar',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    data.d1.time(2000:end-3000),1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoBinSize needs to be a scalar of numeric type', ...
    'HmoBinSize must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    'cat',1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeBinSize needs to be a numeric type scalar', ...
    'TeBinSize must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,'cat',0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeBinSize needs to be a numeric type scalar', ...
    'TeBinSize must be a scalar',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,data.d1.time(2000:end-3000),0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoStartBin needs to be a scalar of numeric type', ...
    'HmoStartBin must be a scalar',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,data.d1.time(2000:end-3000),7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoStartBin needs to be a scalar of numeric type', ...
    'HmoStartBin must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,'goat',7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoEndBin needs to be a scalar of numeric type', ...
    'HmoEndBin must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,7.5,'goat',0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoEndBin needs to be a scalar of numeric type', ...
    'HmoEndBin must be a scalar',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,7.5,data.d1.time(2000:end-3000),0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeStartBin needs to be a numeric type scalar', ...
    'TeStartBin must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,7.5,'goat',18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeStartBin needs to be a numeric type scalar', ...
    'TeStartBin must be a scalar',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,7.5,data.d1.time(4000:end-3000),18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeEndBin needs to be a numeric type scalar', ...
    'TeEndBin must be a scalar',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,7.5,0.0,data.d1.time(2000:end-3000),'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeEndBin needs to be a numeric type scalar', ...
    'TeEndBin must be numeric type',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,7.5,0.0,'fox','output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'HmoEndBin needs to be greater than HoStartBin+HmoBinSize', ...
    'in valid bin sizing',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,0.4,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'TeEndBin needs to be greater than TeStartBin+TeBinSize', ...
    'in valid bin sizing',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,7.5,0.0,0.5,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;

[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Hmo and capLength arrays must have the same length', ...
    'incorrect Hmo/ capLenght lengths',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-2000),data.d1.time(2000:end-3000),...
    0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
[RunIssues] = TestFunctionFail('CalcCaptureLengthMatrix', ...
    'Te and capLength arrays must have the same length', ...
    'incorrect Te/ capLenght lengths',...
    RunIssues, FailIdx,'input',data.d1.time(2000:end-3000),data.d1.time(2000:end-3000),data.d1.time(2000:end-2000),...
    0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
FailIdx = FailIdx + 1;
                
% running the test scripts and evaluating the results
TestIdx = 1;
 [RunIssues, CalcPowerWindow1] = TestFunction('CalcPowerWindow', ...
     'calculate the power window, test 1, no optional parameters', ...
     RunIssues, TestIdx ,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data',...
     outTD.Time_Domain.Time.data',parametersd1,'output','powerdata');
 TestIdx = TestIdx + 1;               
[RunIssues, CalcPowerWindow1] = TestFunction('CalcPowerWindow', ...
    'calculate the power window, test 2, Starttime and Endtime given', ...
    RunIssues, TestIdx ,'input', outTD.Time_Domain.Vdc_V.data',outTD.Time_Domain.Idc_A.data',outTD.Time_Domain.Time.data',...
    outTD.Time_Domain.Time.data',parametersd1,...
    [outTD.Time_Domain.Time.data(1,1),outTD.Time_Domain.Time.data(1,40)],'output','powerdata');
TestIdx = TestIdx + 1;
[RunIssues, CalcPowerWindow1] = TestFunction('CalcPowerWindow', ...
     'calculate the power window, test 3, no optional parameters, but 3 channels', ...
     RunIssues, TestIdx ,'input',  [outTD.Time_Domain.Time.data(4000:end-4000)',outTD.Time_Domain.Time.data(4000:end-4000)',outTD.Time_Domain.Time.data(4000:end-4000)'], ...
     [outTD.Time_Domain.Time.data(4000:end-4000)',outTD.Time_Domain.Time.data(4000:end-4000)',outTD.Time_Domain.Time.data(4000:end-4000)'],outTD.Time_Domain.Time.data(4000:end-4000)',...
                     outTD.Time_Domain.Time.data(4000:end-4000)',parametersd1,'output','powerdata');
TestIdx = TestIdx + 1;                 
[RunIssues, CapLengthmatrix1] = TestFunction('CalcCaptureLengthMatrix', ...
     'calculate the capture length matrix, test 1, all parameters given', ...
     RunIssues, TestIdx ,'input', outTD.Time_Domain.Time.data(2000:end-3000),outTD.Time_Domain.Time.data(2000:end-3000),...
     outTD.Time_Domain.Time.data(2000:end-3000),...
    0.5,1.0,0.0,7.5,0.0,18.0,'output','capLengthMatrix','HmoBins','TeBins');
TestIdx = TestIdx + 1;
[RunIssues, CapLength1] = TestFunction('CalcCaptureLength', ...
     'calculate the capture length, test 1, all parameters given', ...
     RunIssues, TestIdx ,'input',  outTD.Time_Domain.Time.data(4000:end-3000),outTD.Time_Domain.Time.data(4000:end-3000),'output','CaptureLength');