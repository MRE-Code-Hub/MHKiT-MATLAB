function RunIssues = testPower(data,RunIssues)

% function RunIssues = testPower()
%
% Tests the PowerMeasurements functions and identifies any issues with the
% functionality and calculations
%
% Input:
%   Data            A structure that contains the data used in the testing
%                   of the MHKiT functions
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the power performance scripts
% Output:
%   RunIssues       A structure that logs any issues encourntered during
%                   testing of the wave resource module scripts
% Dependencies
%   CalcPowerWindow, initPowerData, initPowerStats, CalcPowerDC,
%
% Usage
%   RunIssues = testSpectra(LoadData)
%   runs the Power Measurements module test scripts using data and logging
%   and issues in RunIssues

powerdata=initPowerData();
powerstats=initPowerStats();

%%%%%%%%%%%%%%%%%%%%%%%%
%CalcPowerWindow
%%%%%%%%%%%%%%%%%%%%%%%%

% testing the error checking in CalcPowerWindow
FailIdx = 1;
 [RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
     'Incorrect number of input arguments, requires at lest 6 arguments, 3 arguments passed', ...
     'Only 3 arguments passed',...
     RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000));

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Incorrect number of input arguments, too many arguments, requires at most 8, 9 arguments passed', ...
    '9 arguments passed',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
                    data.d1.sampleRate,data.d1.time(4000:end-4000),50,1,600,300);
                    
 [RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'voltage must be a numeric matrix with length > 1', ...
    'voltage is not in correct form',...
    RunIssues, FailIdx, 1,data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
    data.d1.sampleRate,data.d1.time(4000:end-4000),50);

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Current must be a numeric matrix with lenght >1', ...
    'current is not in the correct form',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),1,data.d1.time(4000:end-4000),...
    data.d1.sampleRate,data.d1.time(4000:end-4000),50);

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Time must be a numeric vector with lenght >1', ...
    'time is not in the correct form',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),1,data.d1.sampleRate,...
    data.d1.time(4000:end-4000),50);

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'avgwindow must be a numeric scalar', ...
    'avgwindow is not in the correct form',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
    data.d1.sampleRate,data.d1.time(4000:end-4000),data.d1.time(4000:end-4000));

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Current and voltage arrays must be same size', ...
    'current and voltage are not the same size',...
    RunIssues, FailIdx, data.d1.torque(3000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.angleRad(4000:end-4000),...
    data.d1.sampleRate,data.d1.time(4000:end-4000),50);

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Time input is not same length as current or voltage dimension', ...
    'time is not the same length as current and voltage',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.angleRad(3000:end-4000),...
    data.d1.sampleRate,data.d1.time(4000:end-4000),50);

[RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Invalid numer of arguments, if starttime is set, so does endtime', ...
    'If startttime is specified, then endtime must also be',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
                    data.d1.sampleRate,data.d1.time(4000:end-4000),50,1);
 
 [RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Starttime needs to be a scalar of numeric type', ...
    'Starttime is in the wrong form',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
                    data.d1.sampleRate,data.d1.time(4000:end-4000),50,data.d1.time(4000:end-4000),400);

 [RunIssues, FailIdx] = TestFunctionFail('CalcPowerWindow', ...
    'Endtime needs to be a numeric type scalar', ...
    'Endtime is in the wrong form',...
    RunIssues, FailIdx, data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
                    data.d1.sampleRate,data.d1.time(4000:end-4000),50,400,data.d1.time(4000:end-4000));
                
% running the test scripts and evaluating the results
TestIdx = 1;
 [RunIssues, TestIdx] = TestFunction('CalcPowerWindow', 1, ...
     'calculate the power window, test 1, no optional parameters', ...
     RunIssues, FailIdx , 'powerWindow1', data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
                     data.d1.sampleRate,data.d1.time(4000:end-4000),50);
                
% [RunIssues, TestIdx] = TestFunction('CalcPowerWindow', 1, ...
%     'calculate the power window, test 2, Starttime and Endtime given', ...
%     RunIssues, FailIdx , 'powerWindow2', data.d1.torque(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.time(4000:end-4000),...
%                     data.d1.sampleRate,data.d1.time(4000:end-4000),50,300,1000);

[RunIssues, TestIdx] = TestFunction('CalcPowerWindow', 1, ...
     'calculate the power window, test 3, no optional parameters, but 3 channels', ...
     RunIssues, FailIdx , 'powerWindow3', [data.d1.torque(4000:end-4000),data.d1.torque(4000:end-4000),data.d1.torque(4000:end-4000)], ...
     [data.d1.angleRad(4000:end-4000),data.d1.angleRad(4000:end-4000),data.d1.angleRad(4000:end-4000)],data.d1.time(4000:end-4000),...
                     data.d1.sampleRate,data.d1.time(4000:end-4000),50);